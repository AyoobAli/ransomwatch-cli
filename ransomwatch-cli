#!/bin/bash

#  ------------
#  Name        : ransomwatch-cli
#  Author      : Ayoob Ali
#  Version     : v0.1.0 (Beta)
#  Date        : 25-11-2022
#  License     : GNU GPLv3
#  Description : CLI interface to get Ransomware attacks data from ransomwhat.telemetry.ltd
#  ------------


DEPENDENCIES="curl cat jq echo dirname readlink basename getopts" 
APPNAME="ransomwatch-cli"
APPAUTHOR="Ayoob Ali"
APPWEBSITE="https://www.ayoob.ae"
VERSION="v0.1.0 (Beta)"
optString=":hd:qvn:cas:g:"
optMandatory=false
ishelp="no"
err=0
timestamp=`date +"%Y%m%d-%H%M%S"`
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
logPath="$SCRIPT_DIR/logs/$timestamp.log"
quiteMode="no"
logData="yes"
verbose=1
needRoot="no"
userInput=""

##
##
##
dbPostFile="$SCRIPT_DIR/ransomwatch-cli-posts.json"
dbGroupFile="$SCRIPT_DIR/ransomwatch-cli-groups.json"
dateNow="`date +%Y-%m-%d`"
numDays=5
cachData="no"
allData="no"
searchStr=""
isGroup="no"
groupStr=""

for depName in $DEPENDENCIES; do

    if ! command -v "$depName" >/dev/null 2>&1; then
        echo -e " \e[1;91m[Error] Missing dependence:\e[0m \e[92m$depName\e[0m"
        ((err++))
    fi

done

if (( $err > 0 )); then

    echo " You have $err Missing dependencies."
    exit

fi

printx () {

    #
    # Usage: printx "Message" "color" "Verbose Level" "Add New Line"
    #        Colors: gray, red, green, yellow, blue, purple, lightblue, white, gold, none, the default is none
    #        Verbose Level: a number between 0 and the maximum verbose level of the script, the default is 1
    #        Add New line: yes or no, the default is yes
    #

    t_message=""
    t_color="\e[0m"
    t_verbose="1"
    t_newLine="yes"
    t_quite="no"
    t_logPath=""

    t_message="$1"

    case "${2,,}" in
        "gray" | "gr")
            t_color="\e[1;90m";;
        "red" | "r")
            t_color="\e[1;91m";;
        "green" | "g")
            t_color="\e[1;92m";;
        "yellow" | "y")
            t_color="\e[1;93m";;
        "blue" | "b")
            t_color="\e[1;94m";;
        "purple" | "p")
            t_color="\e[1;95m";;
        "lightblue" | "lb")
            t_color="\e[1;96m";;
        "white" | "w")
            t_color="\e[1;97m";;
        "gold" | "gl")
            t_color="\e[1;33m";;
        *)
            t_color="\e[0m";;
    esac

    if [[ "${4,,}" == "no" || "${4,,}" == "n" || "${4,,}" == "0" ]] ; then
        t_newLine="no"
    fi

    if [[ "$quiteMode" == 'yes' ]] ; then
        t_quite="yes"
    fi


    if [[ "$logData" == 'yes' && ! -z "$logPath" ]] ; then
        t_logPath="${logPath}"
    fi

    if [[ "$3" =~ ^[0-9]+$ ]] ; then
        t_verbose="$3"
    fi

    if (( "$t_verbose" >  "$verbose" )); then
        t_quite="yes"
    fi

    if [[ "$t_quite" == "no" ]]; then

        if [[ "$t_newLine" == "yes" ]]; then
            echo -en "$t_color"
            echo -n "$t_message"
            echo -e "\e[0m"
        else
            echo -en "$t_color"
            echo -n "$t_message"
            echo -en "\e[0m"
        fi

    fi


    if [[ "$t_newLine" == "yes" ]]; then
        if [[ ! -z "$t_logPath" ]]; then
            echo "$t_message" 2> /dev/null >> "$t_logPath"
        fi
    else
        if [[ ! -z "$t_logPath" ]]; then
            echo -n "$t_message" 2> /dev/null >> "$t_logPath"
        fi
    fi

}

showBanner () {


    printx "
      .--.
     |o_o |      ____                                              _       _                _ _ 
     |:_/ |     |  _ \ __ _ _ __  ___  ___  _ __ _____      ____ _| |_ ___| |__         ___| (_)
    //   \ \    | |_) / _\` | '_ \/ __|/ _ \| '_ \` _ \ \ /\ / / _\` | __/ __| '_ \ _____ / __| | |
   (|     | )   |  _ < (_| | | | \__ \ (_) | | | | | \ V  V / (_| | || (__| | | |_____| (__| | |
  /\"\_   _/\`\   |_| \_\__,_|_| |_|___/\___/|_| |_| |_|\_/\_/ \__,_|\__\___|_| |_|      \___|_|_|
  \___)=(___/ 
" "g" "1" "n"


    printx "  $APPNAME - $VERSION" "gray" "1"
    printx "  Developed By: $APPAUTHOR" "gray" "2"
    printx "  Data from: ransomwhat.telemetry.ltd" "gray" "2"
    printx "" "" "1"
    printx "" "" "1"

}

showHelp () {
    showBanner
    printx "Usage: `basename $0` [Options]" 'g' "1"
    printx "
    Available Options:
        -h                  Show help menu
        -d <Date>           Filter data on this date (Defualt: $dateNow)
        -n <number>         Number of days to show (Used with -d; Defualt: 5)
        -c                  Use cached data without updating the records
        -a                  Show all records
        -q                  Run in quite mode
        -v                  Increase verbose level (Default: 1)
        -s <string>         Search for a string in the output (RegEx)
        -g <group>          List information about a group
    " 'gold' "1"
    exit
}

trim(){
    local trimStr="$1"
    trimStr="${trimStr##*( )}"
    trimStr="${trimStr%%*( )}"
    echo "$trimStr"
}

if ( ! getopts "$optString" opt && "$optMandatory" -eq true); then
    showHelp
fi

while getopts "$optString" opt; do
    case $opt in
        l) logPath="$OPTARG";;
        h) ishelp="yes";;
        q) quiteMode="yes";;
        v) ((verbose++));;
        d) dateNow="`date -d "$OPTARG" +%Y-%m-%d`";;
        n) numDays="$OPTARG";;
        c) cachData="yes";;
        a) allData="yes";;
        s) searchStr="$OPTARG";;
        g) groupStr="$OPTARG";isGroup="yes";;
    esac
done

printx "$0 $*" "" "999"

if [[ "$ishelp" == 'yes' ]] ; then
    showHelp
fi

if [[ "$needRoot" == "yes" ]]; then

    userID=`sudo id -u`

    if [[ "$userID" != "0" ]]; then
        printx "Auth: You need root permission to run this application." "r" "6"
        exit 2
    fi

fi

showBanner

if [[ "$cachData" == "no" ]]; then

    printx "Updating Records..." 'y' '2' 'n'
    curl -sL ransomwhat.telemetry.ltd/posts | tr -d '\200-\377' > "$dbPostFile"
    curl -sL ransomwhat.telemetry.ltd/groups | tr -d '\200-\377' > "$dbGroupFile"
    printx " [Done]" 'g' '2'

fi

printx "Loading Records..." 'y' '2' 'n'
jsonPosts="`cat "$dbPostFile" 2> /dev/null`"
jsonGroups="`cat "$dbGroupFile" 2> /dev/null`"
printx " [Done]" 'g' '2'
printx ""

if [[ "$isGroup" == "yes" ]]; then

    printx "Search groups records For: " "g" '1' 'n'
    printx "$groupStr" "y" '1'
    printx "--------------------------------" "y" '1'
    dataPrint=`echo "$jsonGroups" | jq ".[] | select( .name | contains(\"$groupStr\"))" 2> /dev/null`
    if [[ -z "$dataPrint" ]]; then
        printx "No Records" "r" "1"
    else
        printx "$dataPrint" '' '1'
    fi
    printx "--------------------------------" "y" '1'
    printx ""
    exit

fi

if [[ "$allData" == "yes" ]]; then

    if [[ ! -z "$searchStr" ]]; then
        printx "Search on all records For: " "g" '1' 'n'
        printx "$searchStr" "y" '1'
        printx "-------------------------" "y"
        dataPrint=`echo "$jsonPosts" | jq -r '.[] | [.discovered, .group_name, .post_title] | @tsv' | grep -iE "$searchStr" |  column -t -s $'\t' 2> /dev/null`
        if [[ -z "$dataPrint" ]]; then
            printx "No Records" "r" "1"
        else
            printx "$dataPrint" '' '1'
        fi
        printx "-------------------------" "y"
        printx ""
    else
        printx "All Records:" "g"
        printx "-----------" "y"
        dataPrint=`echo "$jsonPosts"  | jq -r '.[] | [.discovered, .group_name, .post_title] | @tsv' | column -t -s $'\t' 2> /dev/null`
        if [[ -z "$dataPrint" ]]; then
            printx "No Records" "r" "1"
        else
            printx "$dataPrint" '' '1'
        fi
        printx "-----------" "y"
        printx ""
    fi

else

    cDate="$dateNow"

    ((numDays--))
    for((i=$numDays;i>=0;i--)); do

        cDate="`date -d "$dateNow - $i days" +%Y-%m-%d`"

        if [[ ! -z "$searchStr" ]]; then

            printx "Search records of $cDate For: " "g" '1' 'n'
            printx "$searchStr" "y" '1'
            printx "--------------------------------" "y" '1'
            dataPrint=`echo "$jsonPosts" | jq ".[] | select( .discovered | contains(\"$cDate\"))" | jq -r '[.discovered, .group_name, .post_title] | @tsv' | grep -iE "$searchStr" |  column -t -s $'\t' 2> /dev/null`
            if [[ -z "$dataPrint" ]]; then
                printx "No Records" "r" "1"
            else
                printx "$dataPrint" '' '1'
            fi
            printx "--------------------------------" "y" '1'
            printx ""

        else

            printx "Records of $cDate:" "g" '1'
            printx "---------------------" "y" '1'
            dataPrint=`echo "$jsonPosts" | jq ".[] | select( .discovered | contains(\"$cDate\"))" | jq -r '[.discovered, .group_name, .post_title] | @tsv' | column -t -s $'\t' 2> /dev/null`
            if [[ -z "$dataPrint" ]]; then
                printx "No Records" "r" "1"
            else
                printx "$dataPrint" '' '1'
            fi
            printx "---------------------" "y" '1'
            printx ""

        fi
    done

fi
